import express from "express";
import fs from "fs";
import fetch from "node-fetch";
import path from "path";
import { fileURLToPath } from "url";
import { dirname } from "path";

const app = express();
const PORT = 3000;

// Get the current directory in ES module
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Middleware to serve static files from the 'public' directory
app.use(express.static("public"));
app.use(express.json());

// Function to download an image and save it to the 'downloads' folder
async function downloadImage(imageUrl, filename) {
  const downloadsDir = path.join(__dirname, "downloads");

  // Create the downloads directory if it doesn't exist
  if (!fs.existsSync(downloadsDir)) {
    fs.mkdirSync(downloadsDir);
  }

  const filePath = path.join(downloadsDir, filename);
  const response = await fetch(imageUrl);
  const buffer = await response.buffer();
  fs.writeFileSync(filePath, buffer);
  console.log(`Download Completed: ${filePath}`);
}

app.get("/", (req, res) => {
  res.send("server is running...");
});

// Route to handle image generation based on user input
app.post("/generate-image", async (req, res) => {
  const { prompt, width, height, seed, model } = req.body;
  const filename = `image_${Date.now()}.png`;

  try {
    const imageUrl = `https://pollinations.ai/p/${encodeURIComponent(
      prompt
    )}?width=${width}&height=${height}&seed=${seed}&model=${model}`;

    await downloadImage(imageUrl, filename);

    // Send the image URL back to the client
    res.status(200).json({ imageUrl: `/downloads/${filename}` });
  } catch (error) {
    console.error("Error generating image:", error);
    res.status(500).json({ error: "Image generation failed" });
  }
});

// Serve the downloaded images from the /downloads folder
app.use("/downloads", express.static(path.join(__dirname, "downloads")));

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});


/////////////////////////////////////////////////////////////////////
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Image Generator</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      max-width: 600px;
      margin: auto;
    }
    label {
      display: block;
      margin: 10px 0 5px;
    }
    input, select, button {
      padding: 10px;
      width: 100%;
      margin-bottom: 10px;
    }
    button {
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }
    button:hover {
      background-color: #45a049;
    }
    img {
      max-width: 100%;
      height: auto;
      display: block;
      margin: 20px 0;
    }
    .download-link {
      margin-top: 20px;
    }

    /* Media query for devices with width less than 500px */
    @media (max-width: 500px) {
      body {
        padding: 10px;
        max-width: 100%;
      }
      button {
        padding: 12px;
      }
      input, select {
        font-size: 16px;
      }
      img {
        width: 100%;
        height: auto;
      }
    }
  </style>
</head>
<body>
  <h1>Generate and Download Image</h1>
  <form id="imageForm">
    <label for="prompt">Enter Prompt</label>
    <input type="text" id="prompt" name="prompt" placeholder="Describe your image..." required />
    
    <label for="width">Enter Width</label>
    <input type="number" id="width" name="width" value="1024" required />

    <label for="height">Enter Height</label>
    <input type="number" id="height" name="height" value="1024" required />

    <label for="seed">Enter Seed</label>
    <input type="number" id="seed" name="seed" value="42" required />

    <label for="model">Select Model</label>
    <select id="model" name="model">
      <option value="flux">Flux</option>
      <!-- Add other models if needed -->
    </select>

    <button type="submit">Generate Image</button>
  </form>
  
  <img src="" alt="" id="img" />

  <div class="download-link">
    <a id="downloadLink" href="#" style="display: none;">Download Image</a>
  </div>

  <script>
    const image = document.getElementById("img");
    const button = document.querySelector("button");
    const form = document.getElementById('imageForm');
    const downloadLink = document.getElementById('downloadLink');

    form.addEventListener('submit', async (event) => {
      event.preventDefault();
      button.textContent = "Generating image...";
      button.style.backgroundColor = "red";
      image.alt = "no-image";
      
      const formData = new FormData(form);
      const data = {
        prompt: formData.get('prompt'),
        width: formData.get('width'),
        height: formData.get('height'),
        seed: formData.get('seed'),
        model: formData.get('model')
      };
      try {
        const response = await fetch('https://ai-image-generator-eight-livid.vercel.app/generate-image', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        const result = await response.json();
        console.log(`result: ${result.imageUrl}`);
        button.textContent = "Image generated!";
        button.style.backgroundColor = "blue";
        image.src = result.imageUrl;
        downloadLink.href = result.imageUrl;
        downloadLink.style.display = "block";
        downloadLink.textContent = "Download Image";
          // Show the download link once the image is ready
     
      } catch (error) {
        button.textContent = "Error generating image";
        button.style.backgroundColor = "orange";
        console.error("Error:", error);
      }
    });
  </script>
</body>
</html>
